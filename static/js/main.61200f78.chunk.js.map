{"version":3,"sources":["zindex.ts","roundRect.ts","components/EditableText.tsx","index.tsx"],"names":["swap","elements","indexA","indexB","element","moveOneLeft","indicesToMove","sort","a","b","isSorted","forEach","index","i","moveOneRight","reversedIndicesToMove","length","moveAllLeft","leftMostElements","map","reverse","concat","pos","moveAllRight","rightMostElements","roundRect","context","x","y","width","height","radius","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","fill","stroke","EditableText","props","state","value","edit","this","setState","e","target","onChange","className","name","maxLength","handleEdit","onBlur","handleBlur","onKeyDown","key","autoFocus","onClick","Component","Array","of","DEFAULT_PROJECT_NAME","date","Date","year","getFullYear","month","getMonth","day","getDate","hr","getHours","min","getMinutes","secs","getSeconds","getDateTime","skipHistory","stateHistory","generateHistoryCurrentEntry","JSON","stringify","isSelected","restoreHistoryEntry","entry","newElements","parse","splice","newElement","generateDraw","push","randomSeed","Math","floor","random","withCustomMathRandom","seed","cb","imul","LCG","result","distanceBetweenPointAndSegment","x1","y1","x2","y2","xx","yy","C","D","lenSquare","param","dx","dy","hypot","hitTest","type","px","abs","py","tx","ty","ex","ey","rx","ry","qx","qy","r","q","max","t","getElementAbsoluteX1","getElementAbsoluteX2","getElementAbsoluteY1","getElementAbsoluteY2","getDiamondPoints","topX","topY","rightX","rightY","bottomX","bottomY","leftX","leftY","getArrowPoints","x3","y3","x4","y4","console","warn","Error","resizeTest","sceneState","handlers","handlerRectangles","filter","Object","keys","handler","scrollX","scrollY","strokeColor","backgroundColor","fillStyle","strokeWidth","roughness","opacity","draw","rc","getScrollBars","canvasWidth","canvasHeight","minX","Infinity","maxX","minY","maxY","leftOverflow","rightOverflow","topOverflow","bottomOverflow","horizontalScrollBar","SCROLLBAR_MARGIN","verticalScrollBar","SCROLLBAR_WIDTH","horizontal","vertical","elementX1","elementX2","elementY1","elementY2","marginX","marginY","nw","se","renderScene","canvas","offsetX","offsetY","renderScrollbars","renderSelection","getContext","viewBackgroundColor","fillRect","clearRect","selectedIndices","getSelectedIndices","lineDash","getLineDash","setLineDash","strokeRect","margin","values","scrollBars","window","devicePixelRatio","strokeStyle","scrollBar","saveFile","data","link","document","createElement","setAttribute","click","remove","rotate","angle","cos","sin","ColorPicker","generator","rough","isTextElement","isInputLike","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","distance","minSize","xs","ys","PI","shape","rectangle","globalAlpha","translate","polygon","ellipse","options","shapes","line","font","fillText","text","actualBoundingBoxAscent","clearSelection","resetCursor","documentElement","style","cursor","deleteSelectedElements","restore","savedElements","savedState","undefined","KEYS","SHAPES","icon","viewBox","d","shapesShortcutKeys","capitalize","str","charAt","toUpperCase","slice","findElementByKey","reduce","isArrowKey","keyCode","someElementIsSelected","some","hasBackground","getSelectedFillStyles","fillStyles","from","Set","getSelectedStrokeWidth","getSelectedRoughness","getSelectedOpacity","getSelectedStrokeColor","strokeColors","getSelectedBackgroundColor","backgroundColors","addTextElement","prompt","textMeasure","measureText","actualBoundingBoxDescent","getElementAtPosition","hitElement","ButtonSelect","option","lastCanvasWidth","lastCanvasHeight","lastMouseUp","App","draggingElement","resizingElement","elementType","currentColorPicker","exportBackground","currentItemStrokeColor","currentItemBackgroundColor","onResize","forceUpdate","event","preventDefault","step","shiftKey","metaKey","altKey","code","includes","toLowerCase","lastEntry","pop","clearCanvas","confirm","removeWheelEventListener","changeProperty","callback","changeOpacity","changeStrokeColor","color","changeBackgroundColor","handleWheel","deltaX","deltaY","addEventListener","localStorage","getItem","removeEventListener","innerWidth","innerHeight","onCut","clipboardData","setData","onCopy","onPaste","parsedElements","paste","getData","isArray","parsedElement","title","checked","s","SHAPE_STROKE","hex","SHAPE_BACKGROUND","CANVAS_BACKGROUND","updateProjectName","exportPadding","alert","subCanvasX1","subCanvasX2","subCanvasY1","subCanvasY2","tempCanvas","display","body","appendChild","toDataURL","exportAsPNG","serialized","version","source","location","origin","encodeURIComponent","saveAsJSON","input","reader","FileReader","accept","onchange","files","readAsText","Promise","resolve","onloadend","readyState","DONE","loadFromJSON","then","id","ref","passive","scale","onMouseDown","button","activeElement","blur","isOverHorizontalScrollBar","isOverVerticalScrollBar","isOverScrollBars","clientX","clientY","resizeHandle","isDraggingElements","isResizingElements","resizeElement","find","lastX","lastY","onMouseMove","HTMLElement","el","selectedElements","sign","selection","selectionX1","selectionX2","selectionY1","selectionY2","setSelection","onMouseUp","onDoubleClick","newEntry","setItem","React","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.61200f78.chunk.js","sourcesContent":["function swap<T>(elements: T[], indexA: number, indexB: number) {\n  const element = elements[indexA];\n  elements[indexA] = elements[indexB];\n  elements[indexB] = element;\n}\n\nexport function moveOneLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n  let isSorted = true;\n  // We go from left to right to avoid overriding the wrong elements\n  indicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === i;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index - 1, index);\n  });\n}\n\nexport function moveOneRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n  let isSorted = true;\n\n  // We go from right to left to avoid overriding the wrong elements\n  reversedIndicesToMove.forEach((index, i) => {\n    // We don't want to bubble the first elements that are sorted as they are\n    // already in their correct position\n    isSorted = isSorted && index === elements.length - i - 1;\n    if (isSorted) {\n      return;\n    }\n    swap(elements, index + 1, index);\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [c, f, a, b, d, e, g]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the right.\n//\n//        |1       |0\n// [a, b, _, d, e, _, g]\n//          -> ->\n//\n// which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//\n// Now, we need to move all the elements from marker 1 to the beginning by two (not one)\n// slots to the right, which gives us\n//\n//        |1       |0\n// [a, b, _, _, d, e, g]\n//  ---|--^  ^\n//     ------|\n//\n// which gives us\n//\n//        |1       |0\n// [_, _, a, b, d, e, g]\n//\n// At this point, we can fill back the leftmost elements with the array we saved at\n// the beggining\n//\n//        |1       |0\n// [c, f, a, b, d, e, g]\n//\n// And we are done!\nexport function moveAllLeft<T>(elements: T[], indicesToMove: number[]) {\n  indicesToMove.sort((a: number, b: number) => a - b);\n\n  // Copy the elements to move\n  const leftMostElements = indicesToMove.map(index => elements[index]);\n\n  const reversedIndicesToMove = indicesToMove\n    // We go from right to left to avoid overriding elements.\n    .reverse()\n    // We add 0 for the final marker\n    .concat([0]);\n\n  reversedIndicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the right (i - 1) to the current one (index)\n    for (let pos = reversedIndicesToMove[i - 1] - 1; pos >= index; --pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos + i] = elements[pos];\n    }\n  });\n\n  // The final step\n  leftMostElements.forEach((element, i) => {\n    elements[i] = element;\n  });\n}\n\n// Let's go through an example\n//        |        |\n// [a, b, c, d, e, f, g]\n// -->\n// [a, b, d, e, g, c, f]\n//\n// We are going to override all the elements we want to move, so we keep them in an array\n// that we will restore at the end.\n// [c, f]\n//\n// From now on, we'll never read those values from the array anymore\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//\n// The idea is that we want to shift all the elements between the marker 0 and 1\n// by one slot to the left.\n//\n//        |0       |1\n// [a, b, _, d, e, _, g]\n//          <- <-\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//\n// Now, we need to move all the elements from marker 1 to the end by two (not one)\n// slots to the left, which gives us\n//\n//        |0       |1\n// [a, b, d, e, _, _, g]\n//              ^------\n//\n// which gives us\n//\n//        |0       |1\n// [a, b, d, e, g, _, _]\n//\n// At this point, we can fill back the rightmost elements with the array we saved at\n// the beggining\n//\n//        |0       |1\n// [a, b, d, e, g, c, f]\n//\n// And we are done!\nexport function moveAllRight<T>(elements: T[], indicesToMove: number[]) {\n  const reversedIndicesToMove = indicesToMove.sort(\n    (a: number, b: number) => b - a\n  );\n\n  // Copy the elements to move\n  const rightMostElements = reversedIndicesToMove.map(index => elements[index]);\n\n  indicesToMove = reversedIndicesToMove\n    // We go from left to right to avoid overriding elements.\n    .reverse()\n    // We last element index for the final marker\n    .concat([elements.length]);\n\n  indicesToMove.forEach((index, i) => {\n    // We skip the first one as it is not paired with anything else\n    if (i === 0) {\n      return;\n    }\n\n    // We go from the next marker to the left (i - 1) to the current one (index)\n    for (let pos = indicesToMove[i - 1] + 1; pos < index; ++pos) {\n      // We move by 1 the first time, 2 the second... So we can use the index i in the array\n      elements[pos - i] = elements[pos];\n    }\n  });\n\n  // The final step\n  rightMostElements.forEach((element, i) => {\n    elements[elements.length - i - 1] = element;\n  });\n}\n","/**\n * https://stackoverflow.com/a/3368118\n * Draws a rounded rectangle using the current state of the canvas.\n * @param {CanvasRenderingContext2D} context\n * @param {Number} x The top left x coordinate\n * @param {Number} y The top left y coordinate\n * @param {Number} width The width of the rectangle\n * @param {Number} height The height of the rectangle\n * @param {Number} radius The corner radius\n */\nexport function roundRect(\n  context: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  radius: number\n) {\n  context.beginPath();\n  context.moveTo(x + radius, y);\n  context.lineTo(x + width - radius, y);\n  context.quadraticCurveTo(x + width, y, x + width, y + radius);\n  context.lineTo(x + width, y + height - radius);\n  context.quadraticCurveTo(\n    x + width,\n    y + height,\n    x + width - radius,\n    y + height\n  );\n  context.lineTo(x + radius, y + height);\n  context.quadraticCurveTo(x, y + height, x, y + height - radius);\n  context.lineTo(x, y + radius);\n  context.quadraticCurveTo(x, y, x + radius, y);\n  context.closePath();\n  context.fill();\n  context.stroke();\n}\n","import React, { Fragment, Component } from \"react\";\n\ntype InputState = {\n  value: string;\n  edit: boolean;\n};\n\ntype Props = {\n  value: string;\n  onChange: (value: string) => void;\n};\n\nexport default class EditableText extends Component<Props, InputState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value,\n      edit: false\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(props: Props) {\n    this.setState({ value: props.value });\n  }\n\n  private handleEdit(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ value: e.target.value });\n  }\n\n  private handleBlur() {\n    const { value } = this.state;\n\n    if (!value) {\n      this.setState({ value: this.props.value, edit: false });\n      return;\n    }\n    this.props.onChange(value);\n    this.setState({ edit: false });\n  }\n\n  public render() {\n    const { value, edit } = this.state;\n\n    return (\n      <Fragment>\n        {edit ? (\n          <input\n            className=\"project-name-input\"\n            name=\"name\"\n            maxLength={25}\n            value={value}\n            onChange={e => this.handleEdit(e)}\n            onBlur={() => this.handleBlur()}\n            onKeyDown={e => {\n              if (e.key === \"Enter\") {\n                this.handleBlur();\n              }\n            }}\n            autoFocus\n          />\n        ) : (\n          <span\n            onClick={() => this.setState({ edit: true })}\n            className=\"project-name\"\n          >\n            {value}\n          </span>\n        )}\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport rough from \"roughjs/bin/wrappers/rough\";\nimport { RoughCanvas } from \"roughjs/bin/canvas\";\nimport { SketchPicker } from \"react-color\";\n\nimport { moveOneLeft, moveAllLeft, moveOneRight, moveAllRight } from \"./zindex\";\nimport { roundRect } from \"./roundRect\";\nimport EditableText from \"./components/EditableText\";\n\nimport \"./styles.scss\";\n\ntype ExcalidrawElement = ReturnType<typeof newElement>;\ntype ExcalidrawTextElement = ExcalidrawElement & {\n  type: \"text\";\n  font: string;\n  text: string;\n  actualBoundingBoxAscent: number;\n};\n\nconst LOCAL_STORAGE_KEY = \"excalidraw\";\nconst LOCAL_STORAGE_KEY_STATE = \"excalidraw-state\";\n\nconst elements = Array.of<ExcalidrawElement>();\n\nconst DEFAULT_PROJECT_NAME = `excalidraw-${getDateTime()}`;\n\nlet skipHistory = false;\nconst stateHistory: string[] = [];\nfunction generateHistoryCurrentEntry() {\n  return JSON.stringify(\n    elements.map(element => ({ ...element, isSelected: false }))\n  );\n}\nfunction pushHistoryEntry(newEntry: string) {\n  if (\n    stateHistory.length > 0 &&\n    stateHistory[stateHistory.length - 1] === newEntry\n  ) {\n    // If the last entry is the same as this one, ignore it\n    return;\n  }\n  stateHistory.push(newEntry);\n}\nfunction restoreHistoryEntry(entry: string) {\n  const newElements = JSON.parse(entry);\n  elements.splice(0, elements.length);\n  newElements.forEach((newElement: ExcalidrawElement) => {\n    generateDraw(newElement);\n    elements.push(newElement);\n  });\n  // When restoring, we shouldn't add an history entry otherwise we'll be stuck with it and can't go back\n  skipHistory = true;\n}\n\n// https://stackoverflow.com/questions/521295/seeding-the-random-number-generator-in-javascript/47593316#47593316\nconst LCG = (seed: number) => () =>\n  ((2 ** 31 - 1) & (seed = Math.imul(48271, seed))) / 2 ** 31;\n\nfunction randomSeed() {\n  return Math.floor(Math.random() * 2 ** 31);\n}\n\n// Unfortunately, roughjs doesn't support a seed attribute (https://github.com/pshihn/rough/issues/27).\n// We can achieve the same result by overriding the Math.random function with a\n// pseudo random generator that supports a random seed and swapping it back after.\nfunction withCustomMathRandom<T>(seed: number, cb: () => T): T {\n  const random = Math.random;\n  Math.random = LCG(seed);\n  const result = cb();\n  Math.random = random;\n  return result;\n}\n\n// https://stackoverflow.com/a/6853926/232122\nfunction distanceBetweenPointAndSegment(\n  x: number,\n  y: number,\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number\n) {\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const lenSquare = C * C + D * D;\n  let param = -1;\n  if (lenSquare !== 0) {\n    // in case of 0 length line\n    param = dot / lenSquare;\n  }\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.hypot(dx, dy);\n}\n\nfunction hitTest(element: ExcalidrawElement, x: number, y: number): boolean {\n  // For shapes that are composed of lines, we only enable point-selection when the distance\n  // of the click is less than x pixels of any of the lines that the shape is composed of\n  const lineThreshold = 10;\n\n  if (element.type === \"ellipse\") {\n    // https://stackoverflow.com/a/46007540/232122\n    const px = Math.abs(x - element.x - element.width / 2);\n    const py = Math.abs(y - element.y - element.height / 2);\n\n    let tx = 0.707;\n    let ty = 0.707;\n\n    const a = element.width / 2;\n    const b = element.height / 2;\n\n    [0, 1, 2, 3].forEach(x => {\n      const xx = a * tx;\n      const yy = b * ty;\n\n      const ex = ((a * a - b * b) * tx ** 3) / a;\n      const ey = ((b * b - a * a) * ty ** 3) / b;\n\n      const rx = xx - ex;\n      const ry = yy - ey;\n\n      const qx = px - ex;\n      const qy = py - ey;\n\n      const r = Math.hypot(ry, rx);\n      const q = Math.hypot(qy, qx);\n\n      tx = Math.min(1, Math.max(0, ((qx * r) / q + ex) / a));\n      ty = Math.min(1, Math.max(0, ((qy * r) / q + ey) / b));\n      const t = Math.hypot(ty, tx);\n      tx /= t;\n      ty /= t;\n    });\n\n    return Math.hypot(a * tx - px, b * ty - py) < lineThreshold;\n  } else if (element.type === \"rectangle\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    // (x1, y1) --A-- (x2, y1)\n    //    |D             |B\n    // (x1, y2) --C-- (x2, y2)\n    return (\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y1) < lineThreshold || // A\n      distanceBetweenPointAndSegment(x, y, x2, y1, x2, y2) < lineThreshold || // B\n      distanceBetweenPointAndSegment(x, y, x2, y2, x1, y2) < lineThreshold || // C\n      distanceBetweenPointAndSegment(x, y, x1, y2, x1, y1) < lineThreshold // D\n    );\n  } else if (element.type === \"diamond\") {\n    x -= element.x;\n    y -= element.y;\n\n    const [\n      topX,\n      topY,\n      rightX,\n      rightY,\n      bottomX,\n      bottomY,\n      leftX,\n      leftY\n    ] = getDiamondPoints(element);\n\n    return (\n      distanceBetweenPointAndSegment(x, y, topX, topY, rightX, rightY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, rightX, rightY, bottomX, bottomY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, bottomX, bottomY, leftX, leftY) <\n        lineThreshold ||\n      distanceBetweenPointAndSegment(x, y, leftX, leftY, topX, topY) <\n        lineThreshold\n    );\n  } else if (element.type === \"arrow\") {\n    let [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    // The computation is done at the origin, we need to add a translation\n    x -= element.x;\n    y -= element.y;\n\n    return (\n      //    \\\n      distanceBetweenPointAndSegment(x, y, x3, y3, x2, y2) < lineThreshold ||\n      // -----\n      distanceBetweenPointAndSegment(x, y, x1, y1, x2, y2) < lineThreshold ||\n      //    /\n      distanceBetweenPointAndSegment(x, y, x4, y4, x2, y2) < lineThreshold\n    );\n  } else if (element.type === \"text\") {\n    const x1 = getElementAbsoluteX1(element);\n    const x2 = getElementAbsoluteX2(element);\n    const y1 = getElementAbsoluteY1(element);\n    const y2 = getElementAbsoluteY2(element);\n\n    return x >= x1 && x <= x2 && y >= y1 && y <= y2;\n  } else if (element.type === \"selection\") {\n    console.warn(\"This should not happen, we need to investigate why it does.\");\n    return false;\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\nfunction resizeTest(\n  element: ExcalidrawElement,\n  x: number,\n  y: number,\n  sceneState: SceneState\n): string | false {\n  if (element.type === \"text\") return false;\n\n  const handlers = handlerRectangles(element, sceneState);\n\n  const filter = Object.keys(handlers).filter(key => {\n    const handler = handlers[key];\n\n    return (\n      x + sceneState.scrollX >= handler[0] &&\n      x + sceneState.scrollX <= handler[0] + handler[2] &&\n      y + sceneState.scrollY >= handler[1] &&\n      y + sceneState.scrollY <= handler[1] + handler[3]\n    );\n  });\n\n  if (filter.length > 0) {\n    return filter[0];\n  }\n\n  return false;\n}\n\nfunction newElement(\n  type: string,\n  x: number,\n  y: number,\n  strokeColor: string,\n  backgroundColor: string,\n  fillStyle: string,\n  strokeWidth: number,\n  roughness: number,\n  opacity: number,\n  width = 0,\n  height = 0\n) {\n  const element = {\n    type: type,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    isSelected: false,\n    strokeColor: strokeColor,\n    backgroundColor: backgroundColor,\n    fillStyle: fillStyle,\n    strokeWidth: strokeWidth,\n    roughness: roughness,\n    opacity: opacity,\n    seed: randomSeed(),\n    draw(\n      rc: RoughCanvas,\n      context: CanvasRenderingContext2D,\n      sceneState: SceneState\n    ) {}\n  };\n  return element;\n}\n\ntype SceneState = {\n  scrollX: number;\n  scrollY: number;\n  // null indicates transparent bg\n  viewBackgroundColor: string | null;\n};\n\nconst SCROLLBAR_WIDTH = 6;\nconst SCROLLBAR_MIN_SIZE = 15;\nconst SCROLLBAR_MARGIN = 4;\nconst SCROLLBAR_COLOR = \"rgba(0,0,0,0.3)\";\nconst CANVAS_WINDOW_OFFSET_LEFT = 250;\nconst CANVAS_WINDOW_OFFSET_TOP = 0;\n\nfunction getScrollBars(\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  let minX = Infinity;\n  let maxX = 0;\n  let minY = Infinity;\n  let maxY = 0;\n\n  elements.forEach(element => {\n    minX = Math.min(minX, getElementAbsoluteX1(element));\n    maxX = Math.max(maxX, getElementAbsoluteX2(element));\n    minY = Math.min(minY, getElementAbsoluteY1(element));\n    maxY = Math.max(maxY, getElementAbsoluteY2(element));\n  });\n\n  minX += scrollX;\n  maxX += scrollX;\n  minY += scrollY;\n  maxY += scrollY;\n  const leftOverflow = Math.max(-minX, 0);\n  const rightOverflow = Math.max(-(canvasWidth - maxX), 0);\n  const topOverflow = Math.max(-minY, 0);\n  const bottomOverflow = Math.max(-(canvasHeight - maxY), 0);\n\n  // horizontal scrollbar\n  let horizontalScrollBar = null;\n  if (leftOverflow || rightOverflow) {\n    horizontalScrollBar = {\n      x: Math.min(\n        leftOverflow + SCROLLBAR_MARGIN,\n        canvasWidth - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      y: canvasHeight - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      width: Math.max(\n        canvasWidth - rightOverflow - leftOverflow - SCROLLBAR_MARGIN * 2,\n        SCROLLBAR_MIN_SIZE\n      ),\n      height: SCROLLBAR_WIDTH\n    };\n  }\n\n  // vertical scrollbar\n  let verticalScrollBar = null;\n  if (topOverflow || bottomOverflow) {\n    verticalScrollBar = {\n      x: canvasWidth - SCROLLBAR_WIDTH - SCROLLBAR_MARGIN,\n      y: Math.min(\n        topOverflow + SCROLLBAR_MARGIN,\n        canvasHeight - SCROLLBAR_MIN_SIZE - SCROLLBAR_MARGIN\n      ),\n      width: SCROLLBAR_WIDTH,\n      height: Math.max(\n        canvasHeight - bottomOverflow - topOverflow - SCROLLBAR_WIDTH * 2,\n        SCROLLBAR_MIN_SIZE\n      )\n    };\n  }\n\n  return {\n    horizontal: horizontalScrollBar,\n    vertical: verticalScrollBar\n  };\n}\n\nfunction isOverScrollBars(\n  x: number,\n  y: number,\n  canvasWidth: number,\n  canvasHeight: number,\n  scrollX: number,\n  scrollY: number\n) {\n  const scrollBars = getScrollBars(canvasWidth, canvasHeight, scrollX, scrollY);\n\n  const [isOverHorizontalScrollBar, isOverVerticalScrollBar] = [\n    scrollBars.horizontal,\n    scrollBars.vertical\n  ].map(\n    scrollBar =>\n      scrollBar &&\n      scrollBar.x <= x &&\n      x <= scrollBar.x + scrollBar.width &&\n      scrollBar.y <= y &&\n      y <= scrollBar.y + scrollBar.height\n  );\n\n  return {\n    isOverHorizontalScrollBar,\n    isOverVerticalScrollBar\n  };\n}\n\nfunction handlerRectangles(element: ExcalidrawElement, sceneState: SceneState) {\n  const elementX1 = element.x;\n  const elementX2 = element.x + element.width;\n  const elementY1 = element.y;\n  const elementY2 = element.y + element.height;\n\n  const margin = 4;\n  const minimumSize = 40;\n  const handlers: { [handler: string]: number[] } = {};\n\n  const marginX = element.width < 0 ? 8 : -8;\n  const marginY = element.height < 0 ? 8 : -8;\n\n  if (Math.abs(elementX2 - elementX1) > minimumSize) {\n    handlers[\"n\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY1 - margin + sceneState.scrollY + marginY,\n      8,\n      8\n    ];\n\n    handlers[\"s\"] = [\n      elementX1 + (elementX2 - elementX1) / 2 + sceneState.scrollX - 4,\n      elementY2 - margin + sceneState.scrollY - marginY,\n      8,\n      8\n    ];\n  }\n\n  if (Math.abs(elementY2 - elementY1) > minimumSize) {\n    handlers[\"w\"] = [\n      elementX1 - margin + sceneState.scrollX + marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n\n    handlers[\"e\"] = [\n      elementX2 - margin + sceneState.scrollX - marginX,\n      elementY1 + (elementY2 - elementY1) / 2 + sceneState.scrollY - 4,\n      8,\n      8\n    ];\n  }\n\n  handlers[\"nw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // nw\n  handlers[\"ne\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY1 - margin + sceneState.scrollY + marginY,\n    8,\n    8\n  ]; // ne\n  handlers[\"sw\"] = [\n    elementX1 - margin + sceneState.scrollX + marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // sw\n  handlers[\"se\"] = [\n    elementX2 - margin + sceneState.scrollX - marginX,\n    elementY2 - margin + sceneState.scrollY - marginY,\n    8,\n    8\n  ]; // se\n\n  if (element.type === \"arrow\") {\n    return {\n      nw: handlers.nw,\n      se: handlers.se\n    };\n  }\n\n  return handlers;\n}\n\nfunction renderScene(\n  rc: RoughCanvas,\n  canvas: HTMLCanvasElement,\n  sceneState: SceneState,\n  // extra options, currently passed by export helper\n  {\n    offsetX,\n    offsetY,\n    renderScrollbars = true,\n    renderSelection = true\n  }: {\n    offsetX?: number;\n    offsetY?: number;\n    renderScrollbars?: boolean;\n    renderSelection?: boolean;\n  } = {}\n) {\n  if (!canvas) return;\n  const context = canvas.getContext(\"2d\")!;\n\n  const fillStyle = context.fillStyle;\n  if (typeof sceneState.viewBackgroundColor === \"string\") {\n    context.fillStyle = sceneState.viewBackgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  } else {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n  }\n  context.fillStyle = fillStyle;\n\n  const selectedIndices = getSelectedIndices();\n\n  sceneState = {\n    ...sceneState,\n    scrollX: typeof offsetX === \"number\" ? offsetX : sceneState.scrollX,\n    scrollY: typeof offsetY === \"number\" ? offsetY : sceneState.scrollY\n  };\n\n  elements.forEach(element => {\n    element.draw(rc, context, sceneState);\n    if (renderSelection && element.isSelected) {\n      const margin = 4;\n\n      const elementX1 = getElementAbsoluteX1(element);\n      const elementX2 = getElementAbsoluteX2(element);\n      const elementY1 = getElementAbsoluteY1(element);\n      const elementY2 = getElementAbsoluteY2(element);\n      const lineDash = context.getLineDash();\n      context.setLineDash([8, 4]);\n      context.strokeRect(\n        elementX1 - margin + sceneState.scrollX,\n        elementY1 - margin + sceneState.scrollY,\n        elementX2 - elementX1 + margin * 2,\n        elementY2 - elementY1 + margin * 2\n      );\n      context.setLineDash(lineDash);\n\n      if (element.type !== \"text\" && selectedIndices.length === 1) {\n        const handlers = handlerRectangles(element, sceneState);\n        Object.values(handlers).forEach(handler => {\n          context.strokeRect(handler[0], handler[1], handler[2], handler[3]);\n        });\n      }\n    }\n  });\n\n  if (renderScrollbars) {\n    const scrollBars = getScrollBars(\n      context.canvas.width / window.devicePixelRatio,\n      context.canvas.height / window.devicePixelRatio,\n      sceneState.scrollX,\n      sceneState.scrollY\n    );\n\n    const strokeStyle = context.strokeStyle;\n    context.fillStyle = SCROLLBAR_COLOR;\n    context.strokeStyle = \"rgba(255,255,255,0.8)\";\n    [scrollBars.horizontal, scrollBars.vertical].forEach(scrollBar => {\n      if (scrollBar)\n        roundRect(\n          context,\n          scrollBar.x,\n          scrollBar.y,\n          scrollBar.width,\n          scrollBar.height,\n          SCROLLBAR_WIDTH / 2\n        );\n    });\n    context.strokeStyle = strokeStyle;\n    context.fillStyle = fillStyle;\n  }\n}\n\nfunction saveAsJSON(name: string) {\n  const serialized = JSON.stringify({\n    version: 1,\n    source: window.location.origin,\n    elements\n  });\n\n  saveFile(\n    `${name}.json`,\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(serialized)\n  );\n}\n\nfunction loadFromJSON() {\n  const input = document.createElement(\"input\");\n  const reader = new FileReader();\n  input.type = \"file\";\n  input.accept = \".json\";\n\n  input.onchange = () => {\n    if (!input.files!.length) {\n      alert(\"A file was not selected.\");\n      return;\n    }\n\n    reader.readAsText(input.files![0], \"utf8\");\n  };\n\n  input.click();\n\n  return new Promise(resolve => {\n    reader.onloadend = () => {\n      if (reader.readyState === FileReader.DONE) {\n        const data = JSON.parse(reader.result as string);\n        restore(data.elements, null);\n        resolve();\n      }\n    };\n  });\n}\n\nfunction exportAsPNG({\n  exportBackground,\n  exportPadding = 10,\n  viewBackgroundColor,\n  name\n}: {\n  exportBackground: boolean;\n  exportPadding?: number;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n}) {\n  if (!elements.length) return window.alert(\"Cannot export empty canvas.\");\n  // calculate smallest area to fit the contents in\n\n  let subCanvasX1 = Infinity;\n  let subCanvasX2 = 0;\n  let subCanvasY1 = Infinity;\n  let subCanvasY2 = 0;\n\n  elements.forEach(element => {\n    subCanvasX1 = Math.min(subCanvasX1, getElementAbsoluteX1(element));\n    subCanvasX2 = Math.max(subCanvasX2, getElementAbsoluteX2(element));\n    subCanvasY1 = Math.min(subCanvasY1, getElementAbsoluteY1(element));\n    subCanvasY2 = Math.max(subCanvasY2, getElementAbsoluteY2(element));\n  });\n\n  function distance(x: number, y: number) {\n    return Math.abs(x > y ? x - y : y - x);\n  }\n\n  const tempCanvas = document.createElement(\"canvas\");\n  tempCanvas.style.display = \"none\";\n  document.body.appendChild(tempCanvas);\n  tempCanvas.width = distance(subCanvasX1, subCanvasX2) + exportPadding * 2;\n  tempCanvas.height = distance(subCanvasY1, subCanvasY2) + exportPadding * 2;\n\n  renderScene(\n    rough.canvas(tempCanvas),\n    tempCanvas,\n    {\n      viewBackgroundColor: exportBackground ? viewBackgroundColor : null,\n      scrollX: 0,\n      scrollY: 0\n    },\n    {\n      offsetX: -subCanvasX1 + exportPadding,\n      offsetY: -subCanvasY1 + exportPadding,\n      renderScrollbars: false,\n      renderSelection: false\n    }\n  );\n\n  saveFile(`${name}.png`, tempCanvas.toDataURL(\"image/png\"));\n\n  // clean up the DOM\n  if (tempCanvas !== canvas) tempCanvas.remove();\n}\n\nfunction saveFile(name: string, data: string) {\n  // create a temporary <a> elem which we'll use to download the image\n  const link = document.createElement(\"a\");\n  link.setAttribute(\"download\", name);\n  link.setAttribute(\"href\", data);\n  link.click();\n\n  // clean up\n  link.remove();\n}\n\nfunction rotate(x1: number, y1: number, x2: number, y2: number, angle: number) {\n  // 𝑎′𝑥=(𝑎𝑥−𝑐𝑥)cos𝜃−(𝑎𝑦−𝑐𝑦)sin𝜃+𝑐𝑥\n  // 𝑎′𝑦=(𝑎𝑥−𝑐𝑥)sin𝜃+(𝑎𝑦−𝑐𝑦)cos𝜃+𝑐𝑦.\n  // https://math.stackexchange.com/questions/2204520/how-do-i-rotate-a-line-segment-in-a-specific-point-on-the-line\n  return [\n    (x1 - x2) * Math.cos(angle) - (y1 - y2) * Math.sin(angle) + x2,\n    (x1 - x2) * Math.sin(angle) + (y1 - y2) * Math.cos(angle) + y2\n  ];\n}\n\nfunction getDateTime() {\n  const date = new Date();\n  const year = date.getFullYear();\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const hr = date.getHours();\n  const min = date.getMinutes();\n  const secs = date.getSeconds();\n\n  return `${year}${month}${day}${hr}${min}${secs}`;\n}\n\n// Casting second argument (DrawingSurface) to any,\n// because it is requred by TS definitions and not required at runtime\nconst generator = rough.generator(null, null as any);\n\nfunction isTextElement(\n  element: ExcalidrawElement\n): element is ExcalidrawTextElement {\n  return element.type === \"text\";\n}\n\nfunction isInputLike(\n  target: Element | EventTarget | null\n): target is HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement {\n  return (\n    target instanceof HTMLInputElement ||\n    target instanceof HTMLTextAreaElement ||\n    target instanceof HTMLSelectElement\n  );\n}\n\nfunction getArrowPoints(element: ExcalidrawElement) {\n  const x1 = 0;\n  const y1 = 0;\n  const x2 = element.width;\n  const y2 = element.height;\n\n  const size = 30; // pixels\n  const distance = Math.hypot(x2 - x1, y2 - y1);\n  // Scale down the arrow until we hit a certain size so that it doesn't look weird\n  const minSize = Math.min(size, distance / 2);\n  const xs = x2 - ((x2 - x1) / distance) * minSize;\n  const ys = y2 - ((y2 - y1) / distance) * minSize;\n\n  const angle = 20; // degrees\n  const [x3, y3] = rotate(xs, ys, x2, y2, (-angle * Math.PI) / 180);\n  const [x4, y4] = rotate(xs, ys, x2, y2, (angle * Math.PI) / 180);\n\n  return [x1, y1, x2, y2, x3, y3, x4, y4];\n}\n\nfunction getDiamondPoints(element: ExcalidrawElement) {\n  const topX = Math.floor(element.width / 2) + 1;\n  const topY = 0;\n  const rightX = element.width;\n  const rightY = Math.floor(element.height / 2) + 1;\n  const bottomX = topX;\n  const bottomY = element.height;\n  const leftX = topY;\n  const leftY = rightY;\n\n  return [topX, topY, rightX, rightY, bottomX, bottomY, leftX, leftY];\n}\n\nfunction generateDraw(element: ExcalidrawElement) {\n  if (element.type === \"selection\") {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      const fillStyle = context.fillStyle;\n      context.fillStyle = \"rgba(0, 0, 255, 0.10)\";\n      context.fillRect(\n        element.x + scrollX,\n        element.y + scrollY,\n        element.width,\n        element.height\n      );\n      context.fillStyle = fillStyle;\n    };\n  } else if (element.type === \"rectangle\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      return generator.rectangle(0, 0, element.width, element.height, {\n        stroke: element.strokeColor,\n        fill: element.backgroundColor,\n        fillStyle: element.fillStyle,\n        strokeWidth: element.strokeWidth,\n        roughness: element.roughness\n      });\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"diamond\") {\n    const shape = withCustomMathRandom(element.seed, () => {\n      const [\n        topX,\n        topY,\n        rightX,\n        rightY,\n        bottomX,\n        bottomY,\n        leftX,\n        leftY\n      ] = getDiamondPoints(element);\n      return generator.polygon(\n        [\n          [topX, topY],\n          [rightX, rightY],\n          [bottomX, bottomY],\n          [leftX, leftY]\n        ],\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      );\n    });\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"ellipse\") {\n    const shape = withCustomMathRandom(element.seed, () =>\n      generator.ellipse(\n        element.width / 2,\n        element.height / 2,\n        element.width,\n        element.height,\n        {\n          stroke: element.strokeColor,\n          fill: element.backgroundColor,\n          fillStyle: element.fillStyle,\n          strokeWidth: element.strokeWidth,\n          roughness: element.roughness\n        }\n      )\n    );\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      rc.draw(shape);\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n  } else if (element.type === \"arrow\") {\n    const [x1, y1, x2, y2, x3, y3, x4, y4] = getArrowPoints(element);\n    const options = {\n      stroke: element.strokeColor,\n      strokeWidth: element.strokeWidth,\n      roughness: element.roughness\n    };\n\n    const shapes = withCustomMathRandom(element.seed, () => [\n      //    \\\n      generator.line(x3, y3, x2, y2, options),\n      // -----\n      generator.line(x1, y1, x2, y2, options),\n      //    /\n      generator.line(x4, y4, x2, y2, options)\n    ]);\n\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      context.translate(element.x + scrollX, element.y + scrollY);\n      shapes.forEach(shape => rc.draw(shape));\n      context.translate(-element.x - scrollX, -element.y - scrollY);\n      context.globalAlpha = 1;\n    };\n    return;\n  } else if (isTextElement(element)) {\n    element.draw = (rc, context, { scrollX, scrollY }) => {\n      context.globalAlpha = element.opacity / 100;\n      const font = context.font;\n      context.font = element.font;\n      const fillStyle = context.fillStyle;\n      context.fillStyle = element.strokeColor;\n      context.fillText(\n        element.text,\n        element.x + scrollX,\n        element.y + element.actualBoundingBoxAscent + scrollY\n      );\n      context.fillStyle = fillStyle;\n      context.font = font;\n      context.globalAlpha = 1;\n    };\n  } else {\n    throw new Error(\"Unimplemented type \" + element.type);\n  }\n}\n\n// If the element is created from right to left, the width is going to be negative\n// This set of functions retrieves the absolute position of the 4 points.\n// We can't just always normalize it since we need to remember the fact that an arrow\n// is pointing left or right.\nfunction getElementAbsoluteX1(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x : element.x + element.width;\n}\nfunction getElementAbsoluteX2(element: ExcalidrawElement) {\n  return element.width >= 0 ? element.x + element.width : element.x;\n}\nfunction getElementAbsoluteY1(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y : element.y + element.height;\n}\nfunction getElementAbsoluteY2(element: ExcalidrawElement) {\n  return element.height >= 0 ? element.y + element.height : element.y;\n}\n\nfunction setSelection(selection: ExcalidrawElement) {\n  const selectionX1 = getElementAbsoluteX1(selection);\n  const selectionX2 = getElementAbsoluteX2(selection);\n  const selectionY1 = getElementAbsoluteY1(selection);\n  const selectionY2 = getElementAbsoluteY2(selection);\n  elements.forEach(element => {\n    const elementX1 = getElementAbsoluteX1(element);\n    const elementX2 = getElementAbsoluteX2(element);\n    const elementY1 = getElementAbsoluteY1(element);\n    const elementY2 = getElementAbsoluteY2(element);\n    element.isSelected =\n      element.type !== \"selection\" &&\n      selectionX1 <= elementX1 &&\n      selectionY1 <= elementY1 &&\n      selectionX2 >= elementX2 &&\n      selectionY2 >= elementY2;\n  });\n}\n\nfunction clearSelection() {\n  elements.forEach(element => {\n    element.isSelected = false;\n  });\n}\n\nfunction resetCursor() {\n  document.documentElement.style.cursor = \"\";\n}\n\nfunction deleteSelectedElements() {\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (elements[i].isSelected) {\n      elements.splice(i, 1);\n    }\n  }\n}\n\nfunction save(state: AppState) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(elements));\n  localStorage.setItem(LOCAL_STORAGE_KEY_STATE, JSON.stringify(state));\n}\n\nfunction restoreFromLocalStorage() {\n  const savedElements = localStorage.getItem(LOCAL_STORAGE_KEY);\n  const savedState = localStorage.getItem(LOCAL_STORAGE_KEY_STATE);\n\n  return restore(savedElements, savedState);\n}\n\nfunction restore(\n  savedElements: string | ExcalidrawElement[] | null,\n  savedState: string | null\n) {\n  try {\n    if (savedElements) {\n      elements.splice(\n        0,\n        elements.length,\n        ...(typeof savedElements === \"string\"\n          ? JSON.parse(savedElements)\n          : savedElements)\n      );\n      elements.forEach((element: ExcalidrawElement) => {\n        element.fillStyle = element.fillStyle || \"hachure\";\n        element.strokeWidth = element.strokeWidth || 1;\n        element.roughness = element.roughness || 1;\n        element.opacity =\n          element.opacity === null || element.opacity === undefined\n            ? 100\n            : element.opacity;\n\n        generateDraw(element);\n      });\n    }\n\n    return savedState ? JSON.parse(savedState) : null;\n  } catch (e) {\n    elements.splice(0, elements.length);\n    return null;\n  }\n}\n\nenum ColorPicker {\n  CANVAS_BACKGROUND,\n  SHAPE_STROKE,\n  SHAPE_BACKGROUND\n}\n\ntype AppState = {\n  draggingElement: ExcalidrawElement | null;\n  resizingElement: ExcalidrawElement | null;\n  currentColorPicker: ColorPicker | null;\n  elementType: string;\n  exportBackground: boolean;\n  currentItemStrokeColor: string;\n  currentItemBackgroundColor: string;\n  viewBackgroundColor: string;\n  scrollX: number;\n  scrollY: number;\n  name: string;\n};\n\nconst KEYS = {\n  ARROW_LEFT: \"ArrowLeft\",\n  ARROW_RIGHT: \"ArrowRight\",\n  ARROW_DOWN: \"ArrowDown\",\n  ARROW_UP: \"ArrowUp\",\n  ESCAPE: \"Escape\",\n  DELETE: \"Delete\",\n  BACKSPACE: \"Backspace\"\n};\n\n// We inline font-awesome icons in order to save on js size rather than including the font awesome react library\nconst SHAPES = [\n  {\n    icon: (\n      // fa-mouse-pointer\n      <svg viewBox=\"0 0 320 512\">\n        <path d=\"M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z\" />\n      </svg>\n    ),\n    value: \"selection\"\n  },\n  {\n    icon: (\n      // fa-square\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z\" />\n      </svg>\n    ),\n    value: \"rectangle\"\n  },\n  {\n    icon: (\n      // custom\n      <svg viewBox=\"0 0 223.646 223.646\">\n        <path d=\"M111.823 0L16.622 111.823 111.823 223.646 207.025 111.823z\" />\n      </svg>\n    ),\n    value: \"diamond\"\n  },\n  {\n    icon: (\n      // fa-circle\n      <svg viewBox=\"0 0 512 512\">\n        <path d=\"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z\" />\n      </svg>\n    ),\n    value: \"ellipse\"\n  },\n  {\n    icon: (\n      // fa-long-arrow-alt-right\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z\" />\n      </svg>\n    ),\n    value: \"arrow\"\n  },\n  {\n    icon: (\n      // fa-font\n      <svg viewBox=\"0 0 448 512\">\n        <path d=\"M432 416h-23.41L277.88 53.69A32 32 0 0 0 247.58 32h-47.16a32 32 0 0 0-30.3 21.69L39.41 416H16a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16h-19.58l23.3-64h152.56l23.3 64H304a16 16 0 0 0-16 16v32a16 16 0 0 0 16 16h128a16 16 0 0 0 16-16v-32a16 16 0 0 0-16-16zM176.85 272L224 142.51 271.15 272z\" />\n      </svg>\n    ),\n    value: \"text\"\n  }\n];\n\nconst shapesShortcutKeys = SHAPES.map(shape => shape.value[0]);\n\nfunction capitalize(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction findElementByKey(key: string) {\n  const defaultElement = \"selection\";\n  return SHAPES.reduce((element, shape) => {\n    if (shape.value[0] !== key) return element;\n\n    return shape.value;\n  }, defaultElement);\n}\n\nfunction isArrowKey(keyCode: string) {\n  return (\n    keyCode === KEYS.ARROW_LEFT ||\n    keyCode === KEYS.ARROW_RIGHT ||\n    keyCode === KEYS.ARROW_DOWN ||\n    keyCode === KEYS.ARROW_UP\n  );\n}\n\nfunction getSelectedIndices() {\n  const selectedIndices: number[] = [];\n  elements.forEach((element, index) => {\n    if (element.isSelected) {\n      selectedIndices.push(index);\n    }\n  });\n  return selectedIndices;\n}\n\nconst someElementIsSelected = () =>\n  elements.some(element => element.isSelected);\n\nconst hasBackground = () =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\")\n  );\n\nconst hasStroke = () =>\n  elements.some(\n    element =>\n      element.isSelected &&\n      (element.type === \"rectangle\" ||\n        element.type === \"ellipse\" ||\n        element.type === \"diamond\" ||\n        element.type === \"arrow\")\n  );\n\nfunction getSelectedFillStyles() {\n  const fillStyles = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.fillStyle)\n    )\n  );\n  return fillStyles.length === 1 ? fillStyles[0] : null;\n}\n\nfunction getSelectedStrokeWidth() {\n  const strokeWidth = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.strokeWidth)\n    )\n  );\n  return strokeWidth.length === 1 ? strokeWidth[0] : null;\n}\n\nfunction getSelectedRoughness() {\n  const roughness = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.roughness)\n    )\n  );\n  return roughness.length === 1 ? roughness[0] : null;\n}\n\nfunction getSelectedOpacity() {\n  const opacity = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.opacity)\n    )\n  );\n  return opacity.length === 1 ? opacity[0] : null;\n}\n\nfunction getSelectedStrokeColor() {\n  const strokeColors = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.strokeColor)\n    )\n  );\n  return strokeColors.length === 1 ? strokeColors[0] : null;\n}\n\nfunction getSelectedBackgroundColor() {\n  const backgroundColors = Array.from(\n    new Set(\n      elements\n        .filter(element => element.isSelected)\n        .map(element => element.backgroundColor)\n    )\n  );\n  return backgroundColors.length === 1 ? backgroundColors[0] : null;\n}\n\nfunction addTextElement(element: ExcalidrawTextElement) {\n  resetCursor();\n  const text = prompt(\"What text do you want?\");\n  if (text === null || text === \"\") {\n    return false;\n  }\n  const fontSize = 20;\n  element.text = text;\n  element.font = `${fontSize}px Virgil`;\n  const font = context.font;\n  context.font = element.font;\n  const textMeasure = context.measureText(element.text);\n  const width = textMeasure.width;\n  const actualBoundingBoxAscent =\n    textMeasure.actualBoundingBoxAscent || fontSize;\n  const actualBoundingBoxDescent = textMeasure.actualBoundingBoxDescent || 0;\n  element.actualBoundingBoxAscent = actualBoundingBoxAscent;\n  context.font = font;\n  const height = actualBoundingBoxAscent + actualBoundingBoxDescent;\n  // Center the text\n  element.x -= width / 2;\n  element.y -= actualBoundingBoxAscent;\n  element.width = width;\n  element.height = height;\n\n  return true;\n}\n\nfunction getElementAtPosition(x: number, y: number) {\n  let hitElement = null;\n  // We need to to hit testing from front (end of the array) to back (beginning of the array)\n  for (let i = elements.length - 1; i >= 0; --i) {\n    if (hitTest(elements[i], x, y)) {\n      hitElement = elements[i];\n      break;\n    }\n  }\n\n  return hitElement;\n}\n\nfunction ButtonSelect<T>({\n  options,\n  value,\n  onChange\n}: {\n  options: { value: T; text: string }[];\n  value: T | null;\n  onChange: (value: T) => void;\n}) {\n  return (\n    <div className=\"buttonList\">\n      {options.map(option => (\n        <button\n          key={option.text}\n          onClick={() => onChange(option.value)}\n          className={value === option.value ? \"active\" : \"\"}\n        >\n          {option.text}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nconst ELEMENT_SHIFT_TRANSLATE_AMOUNT = 5;\nconst ELEMENT_TRANSLATE_AMOUNT = 1;\n\nlet lastCanvasWidth = -1;\nlet lastCanvasHeight = -1;\n\nlet lastMouseUp: ((e: any) => void) | null = null;\n\nclass App extends React.Component<{}, AppState> {\n  public componentDidMount() {\n    document.addEventListener(\"keydown\", this.onKeyDown, false);\n    window.addEventListener(\"resize\", this.onResize, false);\n\n    const savedState = restoreFromLocalStorage();\n    if (savedState) {\n      this.setState(savedState);\n    }\n  }\n\n  public componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.onKeyDown, false);\n    window.removeEventListener(\"resize\", this.onResize, false);\n  }\n\n  public state: AppState = {\n    draggingElement: null,\n    resizingElement: null,\n    elementType: \"selection\",\n    currentColorPicker: null,\n    exportBackground: true,\n    currentItemStrokeColor: \"#000000\",\n    currentItemBackgroundColor: \"#ffffff\",\n    viewBackgroundColor: \"#ffffff\",\n    scrollX: 0,\n    scrollY: 0,\n    name: DEFAULT_PROJECT_NAME\n  };\n\n  private onResize = () => {\n    this.forceUpdate();\n  };\n\n  private onKeyDown = (event: KeyboardEvent) => {\n    if (isInputLike(event.target)) return;\n\n    if (event.key === KEYS.ESCAPE) {\n      clearSelection();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (event.key === KEYS.BACKSPACE || event.key === KEYS.DELETE) {\n      deleteSelectedElements();\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (isArrowKey(event.key)) {\n      const step = event.shiftKey\n        ? ELEMENT_SHIFT_TRANSLATE_AMOUNT\n        : ELEMENT_TRANSLATE_AMOUNT;\n      elements.forEach(element => {\n        if (element.isSelected) {\n          if (event.key === KEYS.ARROW_LEFT) element.x -= step;\n          else if (event.key === KEYS.ARROW_RIGHT) element.x += step;\n          else if (event.key === KEYS.ARROW_UP) element.y -= step;\n          else if (event.key === KEYS.ARROW_DOWN) element.y += step;\n        }\n      });\n      this.forceUpdate();\n      event.preventDefault();\n\n      // Send backward: Cmd-Shift-Alt-B\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyB\"\n    ) {\n      this.moveOneLeft();\n      event.preventDefault();\n\n      // Send to back: Cmd-Shift-B\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyB\") {\n      this.moveAllLeft();\n      event.preventDefault();\n\n      // Bring forward: Cmd-Shift-Alt-F\n    } else if (\n      event.metaKey &&\n      event.shiftKey &&\n      event.altKey &&\n      event.code === \"KeyF\"\n    ) {\n      this.moveOneRight();\n      event.preventDefault();\n\n      // Bring to front: Cmd-Shift-F\n    } else if (event.metaKey && event.shiftKey && event.code === \"KeyF\") {\n      this.moveAllRight();\n      event.preventDefault();\n\n      // Select all: Cmd-A\n    } else if (event.metaKey && event.code === \"KeyA\") {\n      elements.forEach(element => {\n        element.isSelected = true;\n      });\n      this.forceUpdate();\n      event.preventDefault();\n    } else if (shapesShortcutKeys.includes(event.key.toLowerCase())) {\n      this.setState({ elementType: findElementByKey(event.key) });\n    } else if (event.metaKey && event.code === \"KeyZ\") {\n      let lastEntry = stateHistory.pop();\n      // If nothing was changed since last, take the previous one\n      if (generateHistoryCurrentEntry() === lastEntry) {\n        lastEntry = stateHistory.pop();\n      }\n      if (lastEntry !== undefined) {\n        restoreHistoryEntry(lastEntry);\n      }\n      this.forceUpdate();\n      event.preventDefault();\n    }\n  };\n\n  private deleteSelectedElements = () => {\n    deleteSelectedElements();\n    this.forceUpdate();\n  };\n\n  private clearCanvas = () => {\n    if (window.confirm(\"This will clear the whole canvas. Are you sure?\")) {\n      elements.splice(0, elements.length);\n      this.setState({\n        viewBackgroundColor: \"#ffffff\",\n        scrollX: 0,\n        scrollY: 0\n      });\n      this.forceUpdate();\n    }\n  };\n\n  private moveAllLeft = () => {\n    moveAllLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneLeft = () => {\n    moveOneLeft(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveAllRight = () => {\n    moveAllRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private moveOneRight = () => {\n    moveOneRight(elements, getSelectedIndices());\n    this.forceUpdate();\n  };\n\n  private removeWheelEventListener: (() => void) | undefined;\n\n  private updateProjectName(name: string): void {\n    this.setState({ name });\n  }\n\n  private changeProperty = (callback: (element: ExcalidrawElement) => void) => {\n    elements.forEach(element => {\n      if (element.isSelected) {\n        callback(element);\n        generateDraw(element);\n      }\n    });\n\n    this.forceUpdate();\n  };\n\n  private changeOpacity = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.changeProperty(element => (element.opacity = +event.target.value));\n  };\n\n  private changeStrokeColor = (color: string) => {\n    this.changeProperty(element => (element.strokeColor = color));\n    this.setState({ currentItemStrokeColor: color });\n  };\n\n  private changeBackgroundColor = (color: string) => {\n    this.changeProperty(element => (element.backgroundColor = color));\n    this.setState({ currentItemBackgroundColor: color });\n  };\n\n  public render() {\n    const canvasWidth = window.innerWidth - CANVAS_WINDOW_OFFSET_LEFT;\n    const canvasHeight = window.innerHeight - CANVAS_WINDOW_OFFSET_TOP;\n\n    return (\n      <div\n        className=\"container\"\n        onCut={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          deleteSelectedElements();\n          this.forceUpdate();\n          e.preventDefault();\n        }}\n        onCopy={e => {\n          e.clipboardData.setData(\n            \"text/plain\",\n            JSON.stringify(elements.filter(element => element.isSelected))\n          );\n          e.preventDefault();\n        }}\n        onPaste={e => {\n          const paste = e.clipboardData.getData(\"text\");\n          let parsedElements;\n          try {\n            parsedElements = JSON.parse(paste);\n          } catch (e) {}\n          if (\n            Array.isArray(parsedElements) &&\n            parsedElements.length > 0 &&\n            parsedElements[0].type // need to implement a better check here...\n          ) {\n            clearSelection();\n            parsedElements.forEach(parsedElement => {\n              parsedElement.x += 10;\n              parsedElement.y += 10;\n              parsedElement.seed = randomSeed();\n              generateDraw(parsedElement);\n              elements.push(parsedElement);\n            });\n            this.forceUpdate();\n          }\n          e.preventDefault();\n        }}\n      >\n        <div className=\"sidePanel\">\n          <h4>Shapes</h4>\n          <div className=\"panelTools\">\n            {SHAPES.map(({ value, icon }) => (\n              <label\n                key={value}\n                className=\"tool\"\n                title={`${capitalize(value)} - ${capitalize(value)[0]}`}\n              >\n                <input\n                  type=\"radio\"\n                  checked={this.state.elementType === value}\n                  onChange={() => {\n                    this.setState({ elementType: value });\n                    clearSelection();\n                    document.documentElement.style.cursor =\n                      value === \"text\" ? \"text\" : \"crosshair\";\n                    this.forceUpdate();\n                  }}\n                />\n                <div className=\"toolIcon\">{icon}</div>\n              </label>\n            ))}\n          </div>\n          {someElementIsSelected() && (\n            <div className=\"panelColumn\">\n              <h4>Selection</h4>\n              <div className=\"buttonList\">\n                <button onClick={this.moveOneRight}>Bring forward</button>\n                <button onClick={this.moveAllRight}>Bring to front</button>\n                <button onClick={this.moveOneLeft}>Send backward</button>\n                <button onClick={this.moveAllLeft}>Send to back</button>\n              </div>\n              <h5>Stroke Color</h5>\n              <div>\n                <button\n                  className=\"swatch\"\n                  style={{\n                    backgroundColor:\n                      getSelectedStrokeColor() ||\n                      this.state.currentItemStrokeColor\n                  }}\n                  onClick={() =>\n                    this.setState(s => ({\n                      currentColorPicker:\n                        s.currentColorPicker === ColorPicker.SHAPE_STROKE\n                          ? null\n                          : ColorPicker.SHAPE_STROKE\n                    }))\n                  }\n                />\n                {this.state.currentColorPicker === ColorPicker.SHAPE_STROKE && (\n                  <div className=\"popover\">\n                    <div\n                      className=\"cover\"\n                      onClick={() =>\n                        this.setState({ currentColorPicker: null })\n                      }\n                    />\n                    <SketchPicker\n                      color={this.state.currentItemStrokeColor}\n                      onChange={color => this.changeStrokeColor(color.hex)}\n                    />\n                  </div>\n                )}\n                <input\n                  type=\"text\"\n                  className=\"swatch-input\"\n                  value={\n                    getSelectedStrokeColor() ||\n                    this.state.currentItemStrokeColor\n                  }\n                  onChange={e => this.changeStrokeColor(e.target.value)}\n                />\n              </div>\n\n              {hasBackground() && (\n                <>\n                  <h5>Background Color</h5>\n                  <div>\n                    <button\n                      className=\"swatch\"\n                      style={{\n                        backgroundColor:\n                          getSelectedBackgroundColor() ||\n                          this.state.currentItemBackgroundColor\n                      }}\n                      onClick={() =>\n                        this.setState(s => ({\n                          currentColorPicker:\n                            s.currentColorPicker ===\n                            ColorPicker.SHAPE_BACKGROUND\n                              ? null\n                              : ColorPicker.SHAPE_BACKGROUND\n                        }))\n                      }\n                    />\n                    {this.state.currentColorPicker ===\n                    ColorPicker.SHAPE_BACKGROUND ? (\n                      <div className=\"popover\">\n                        <div\n                          className=\"cover\"\n                          onClick={() =>\n                            this.setState({ currentColorPicker: null })\n                          }\n                        />\n                        <SketchPicker\n                          color={this.state.currentItemBackgroundColor}\n                          onChange={color =>\n                            this.changeBackgroundColor(color.hex)\n                          }\n                        />\n                      </div>\n                    ) : null}\n                    <input\n                      type=\"text\"\n                      className=\"swatch-input\"\n                      value={\n                        getSelectedBackgroundColor() ||\n                        this.state.currentItemBackgroundColor\n                      }\n                      onChange={e => this.changeBackgroundColor(e.target.value)}\n                    />\n                  </div>\n                </>\n              )}\n\n              {hasBackground() && (\n                <>\n                  <h5>Fill</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: \"solid\", text: \"Solid\" },\n                      { value: \"hachure\", text: \"Hachure\" },\n                      { value: \"cross-hatch\", text: \"Cross-hatch\" }\n                    ]}\n                    value={getSelectedFillStyles()}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.fillStyle = value;\n                      });\n                    }}\n                  />\n                </>\n              )}\n\n              {hasStroke() && (\n                <>\n                  <h5>Stroke Width</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 1, text: \"Thin\" },\n                      { value: 2, text: \"Bold\" },\n                      { value: 4, text: \"Extra Bold\" }\n                    ]}\n                    value={getSelectedStrokeWidth()}\n                    onChange={value => {\n                      this.changeProperty(element => {\n                        element.strokeWidth = value;\n                      });\n                    }}\n                  />\n\n                  <h5>Slopiness</h5>\n                  <ButtonSelect\n                    options={[\n                      { value: 0, text: \"Draftsman\" },\n                      { value: 1, text: \"Artist\" },\n                      { value: 3, text: \"Cartoonist\" }\n                    ]}\n                    value={getSelectedRoughness()}\n                    onChange={value =>\n                      this.changeProperty(element => {\n                        element.roughness = value;\n                      })\n                    }\n                  />\n                </>\n              )}\n\n              <h5>Opacity</h5>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                onChange={this.changeOpacity}\n                value={\n                  getSelectedOpacity() ||\n                  0 /* Put the opacity at 0 if there are two conflicting ones */\n                }\n              />\n\n              <button onClick={this.deleteSelectedElements}>\n                Delete selected\n              </button>\n            </div>\n          )}\n          <h4>Canvas</h4>\n          <div className=\"panelColumn\">\n            <h5>Canvas Background Color</h5>\n            <div>\n              <button\n                className=\"swatch\"\n                style={{\n                  backgroundColor: this.state.viewBackgroundColor\n                }}\n                onClick={() =>\n                  this.setState(s => ({\n                    currentColorPicker:\n                      s.currentColorPicker === ColorPicker.CANVAS_BACKGROUND\n                        ? null\n                        : ColorPicker.CANVAS_BACKGROUND\n                  }))\n                }\n              />\n              {this.state.currentColorPicker ===\n              ColorPicker.CANVAS_BACKGROUND ? (\n                <div className=\"popover\">\n                  <div\n                    className=\"cover\"\n                    onClick={() => this.setState({ currentColorPicker: null })}\n                  />\n                  <SketchPicker\n                    color={this.state.viewBackgroundColor}\n                    onChange={color => {\n                      this.setState({ viewBackgroundColor: color.hex });\n                    }}\n                  />\n                </div>\n              ) : null}\n              <input\n                type=\"text\"\n                className=\"swatch-input\"\n                value={this.state.viewBackgroundColor}\n                onChange={e =>\n                  this.setState({ viewBackgroundColor: e.target.value })\n                }\n              />\n            </div>\n            <button\n              onClick={this.clearCanvas}\n              title=\"Clear the canvas & reset background color\"\n            >\n              Clear canvas\n            </button>\n          </div>\n          <h4>Export</h4>\n          <div className=\"panelColumn\">\n            <h5>Name</h5>\n            {this.state.name && (\n              <EditableText\n                value={this.state.name}\n                onChange={(name: string) => this.updateProjectName(name)}\n              />\n            )}\n            <h5>Image</h5>\n            <button\n              onClick={() => {\n                exportAsPNG(this.state);\n              }}\n            >\n              Export to png\n            </button>\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={this.state.exportBackground}\n                onChange={e => {\n                  this.setState({ exportBackground: e.target.checked });\n                }}\n              />\n              background\n            </label>\n            <h5>Scene</h5>\n            <button\n              onClick={() => {\n                saveAsJSON(this.state.name);\n              }}\n            >\n              Save as...\n            </button>\n            <button\n              onClick={() => {\n                loadFromJSON().then(() => this.forceUpdate());\n              }}\n            >\n              Load file...\n            </button>\n          </div>\n        </div>\n        <canvas\n          id=\"canvas\"\n          style={{\n            width: canvasWidth,\n            height: canvasHeight\n          }}\n          width={canvasWidth * window.devicePixelRatio}\n          height={canvasHeight * window.devicePixelRatio}\n          ref={canvas => {\n            if (this.removeWheelEventListener) {\n              this.removeWheelEventListener();\n              this.removeWheelEventListener = undefined;\n            }\n            if (canvas) {\n              canvas.addEventListener(\"wheel\", this.handleWheel, {\n                passive: false\n              });\n              this.removeWheelEventListener = () =>\n                canvas.removeEventListener(\"wheel\", this.handleWheel);\n\n              // Whenever React sets the width/height of the canvas element,\n              // the context loses the scale transform. We need to re-apply it\n              if (\n                canvasWidth !== lastCanvasWidth ||\n                canvasHeight !== lastCanvasHeight\n              ) {\n                lastCanvasWidth = canvasWidth;\n                lastCanvasHeight = canvasHeight;\n                canvas\n                  .getContext(\"2d\")!\n                  .scale(window.devicePixelRatio, window.devicePixelRatio);\n              }\n            }\n          }}\n          onMouseDown={e => {\n            if (lastMouseUp !== null) {\n              // Unfortunately, sometimes we don't get a mouseup after a mousedown,\n              // this can happen when a contextual menu or alert is triggered. In order to avoid\n              // being in a weird state, we clean up on the next mousedown\n              lastMouseUp(e);\n            }\n            // only handle left mouse button\n            if (e.button !== 0) return;\n            // fixes mousemove causing selection of UI texts #32\n            e.preventDefault();\n            // Preventing the event above disables default behavior\n            //  of defocusing potentially focused input, which is what we want\n            //  when clicking inside the canvas.\n            if (isInputLike(document.activeElement)) {\n              document.activeElement.blur();\n            }\n\n            // Handle scrollbars dragging\n            const {\n              isOverHorizontalScrollBar,\n              isOverVerticalScrollBar\n            } = isOverScrollBars(\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT,\n              e.clientY - CANVAS_WINDOW_OFFSET_TOP,\n              canvasWidth,\n              canvasHeight,\n              this.state.scrollX,\n              this.state.scrollY\n            );\n\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n            const element = newElement(\n              this.state.elementType,\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n            let resizeHandle: string | false = false;\n            let isDraggingElements = false;\n            let isResizingElements = false;\n            if (this.state.elementType === \"selection\") {\n              const resizeElement = elements.find(element => {\n                return resizeTest(element, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n              });\n\n              this.setState({\n                resizingElement: resizeElement ? resizeElement : null\n              });\n\n              if (resizeElement) {\n                resizeHandle = resizeTest(resizeElement, x, y, {\n                  scrollX: this.state.scrollX,\n                  scrollY: this.state.scrollY,\n                  viewBackgroundColor: this.state.viewBackgroundColor\n                });\n                document.documentElement.style.cursor = `${resizeHandle}-resize`;\n                isResizingElements = true;\n              } else {\n                const hitElement = getElementAtPosition(x, y);\n\n                // If we click on something\n                if (hitElement) {\n                  if (hitElement.isSelected) {\n                    // If that element is not already selected, do nothing,\n                    // we're likely going to drag it\n                  } else {\n                    // We unselect every other elements unless shift is pressed\n                    if (!e.shiftKey) {\n                      clearSelection();\n                    }\n                    // No matter what, we select it\n                    hitElement.isSelected = true;\n                  }\n                } else {\n                  // If we don't click on anything, let's remove all the selected elements\n                  clearSelection();\n                }\n\n                isDraggingElements = someElementIsSelected();\n\n                if (isDraggingElements) {\n                  document.documentElement.style.cursor = \"move\";\n                }\n              }\n            }\n\n            if (isTextElement(element)) {\n              if (!addTextElement(element)) {\n                return;\n              }\n            }\n\n            generateDraw(element);\n            elements.push(element);\n            if (this.state.elementType === \"text\") {\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              element.isSelected = true;\n            } else {\n              this.setState({ draggingElement: element });\n            }\n\n            let lastX = x;\n            let lastY = y;\n\n            if (isOverHorizontalScrollBar || isOverVerticalScrollBar) {\n              lastX = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n              lastY = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n            }\n\n            const onMouseMove = (e: MouseEvent) => {\n              const target = e.target;\n              if (!(target instanceof HTMLElement)) {\n                return;\n              }\n\n              if (isOverHorizontalScrollBar) {\n                const x = e.clientX - CANVAS_WINDOW_OFFSET_LEFT;\n                const dx = x - lastX;\n                this.setState(state => ({ scrollX: state.scrollX - dx }));\n                lastX = x;\n                return;\n              }\n\n              if (isOverVerticalScrollBar) {\n                const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP;\n                const dy = y - lastY;\n                this.setState(state => ({ scrollY: state.scrollY - dy }));\n                lastY = y;\n                return;\n              }\n\n              if (isResizingElements && this.state.resizingElement) {\n                const el = this.state.resizingElement;\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length === 1) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    switch (resizeHandle) {\n                      case \"nw\":\n                        element.width += element.x - lastX;\n                        element.height += element.y - lastY;\n                        element.x = lastX;\n                        element.y = lastY;\n                        break;\n                      case \"ne\":\n                        element.width = lastX - element.x;\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"sw\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        element.height = lastY - element.y;\n                        break;\n                      case \"se\":\n                        element.width += x - lastX;\n                        if (e.shiftKey) {\n                          element.height = element.width;\n                        } else {\n                          element.height += y - lastY;\n                        }\n                        break;\n                      case \"n\":\n                        element.height += element.y - lastY;\n                        element.y = lastY;\n                        break;\n                      case \"w\":\n                        element.width += element.x - lastX;\n                        element.x = lastX;\n                        break;\n                      case \"s\":\n                        element.height = lastY - element.y;\n                        break;\n                      case \"e\":\n                        element.width = lastX - element.x;\n                        break;\n                    }\n\n                    el.x = element.x;\n                    el.y = element.y;\n                    generateDraw(el);\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when resizing an element\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              if (isDraggingElements) {\n                const selectedElements = elements.filter(el => el.isSelected);\n                if (selectedElements.length) {\n                  const x =\n                    e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n                  const y =\n                    e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n                  selectedElements.forEach(element => {\n                    element.x += x - lastX;\n                    element.y += y - lastY;\n                  });\n                  lastX = x;\n                  lastY = y;\n                  // We don't want to save history when dragging an element to initially size it\n                  skipHistory = true;\n                  this.forceUpdate();\n                  return;\n                }\n              }\n\n              // It is very important to read this.state within each move event,\n              // otherwise we would read a stale one!\n              const draggingElement = this.state.draggingElement;\n              if (!draggingElement) return;\n              let width =\n                e.clientX -\n                CANVAS_WINDOW_OFFSET_LEFT -\n                draggingElement.x -\n                this.state.scrollX;\n              let height =\n                e.clientY -\n                CANVAS_WINDOW_OFFSET_TOP -\n                draggingElement.y -\n                this.state.scrollY;\n              draggingElement.width = width;\n              // Make a perfect square or circle when shift is enabled\n              draggingElement.height = e.shiftKey\n                ? Math.abs(width) * Math.sign(height)\n                : height;\n\n              generateDraw(draggingElement);\n\n              if (this.state.elementType === \"selection\") {\n                setSelection(draggingElement);\n              }\n              // We don't want to save history when moving an element\n              skipHistory = true;\n              this.forceUpdate();\n            };\n\n            const onMouseUp = (e: MouseEvent) => {\n              const { draggingElement, elementType } = this.state;\n\n              lastMouseUp = null;\n              window.removeEventListener(\"mousemove\", onMouseMove);\n              window.removeEventListener(\"mouseup\", onMouseUp);\n\n              resetCursor();\n\n              // if no element is clicked, clear the selection and redraw\n              if (draggingElement === null) {\n                clearSelection();\n                this.forceUpdate();\n                return;\n              }\n\n              if (elementType === \"selection\") {\n                if (isDraggingElements) {\n                  isDraggingElements = false;\n                }\n                elements.pop();\n              } else {\n                draggingElement.isSelected = true;\n              }\n\n              this.setState({\n                draggingElement: null,\n                elementType: \"selection\"\n              });\n              this.forceUpdate();\n            };\n\n            lastMouseUp = onMouseUp;\n\n            window.addEventListener(\"mousemove\", onMouseMove);\n            window.addEventListener(\"mouseup\", onMouseUp);\n\n            // We don't want to save history on mouseDown, only on mouseUp when it's fully configured\n            skipHistory = true;\n            this.forceUpdate();\n          }}\n          onDoubleClick={e => {\n            const x =\n              e.clientX - CANVAS_WINDOW_OFFSET_LEFT - this.state.scrollX;\n            const y = e.clientY - CANVAS_WINDOW_OFFSET_TOP - this.state.scrollY;\n\n            if (getElementAtPosition(x, y)) {\n              return;\n            }\n\n            const element = newElement(\n              \"text\",\n              x,\n              y,\n              this.state.currentItemStrokeColor,\n              this.state.currentItemBackgroundColor,\n              \"hachure\",\n              1,\n              1,\n              100\n            );\n\n            if (!addTextElement(element as ExcalidrawTextElement)) {\n              return;\n            }\n\n            generateDraw(element);\n            elements.push(element);\n\n            this.setState({\n              draggingElement: null,\n              elementType: \"selection\"\n            });\n            element.isSelected = true;\n\n            this.forceUpdate();\n          }}\n        />\n      </div>\n    );\n  }\n\n  private handleWheel = (e: WheelEvent) => {\n    e.preventDefault();\n    const { deltaX, deltaY } = e;\n    this.setState(state => ({\n      scrollX: state.scrollX - deltaX,\n      scrollY: state.scrollY - deltaY\n    }));\n  };\n\n  componentDidUpdate() {\n    renderScene(rc, canvas, {\n      scrollX: this.state.scrollX,\n      scrollY: this.state.scrollY,\n      viewBackgroundColor: this.state.viewBackgroundColor\n    });\n    save(this.state);\n    if (!skipHistory) {\n      pushHistoryEntry(generateHistoryCurrentEntry());\n    }\n    skipHistory = false;\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\nconst canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\nconst rc = rough.canvas(canvas);\nconst context = canvas.getContext(\"2d\")!;\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}